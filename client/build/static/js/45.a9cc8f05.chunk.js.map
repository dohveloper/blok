{"version":3,"file":"static/js/45.a9cc8f05.chunk.js","mappings":"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","sources":["components/Blocks/Resume/Skillset/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { TextInput, CustomSelect, ArrInput } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport { getCurrentStyleOption, getStyleOptions } from '../../blockHelper';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  updateBlockData,\n  selectBlockById,\n  updateTemplate,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\nimport styled from 'styled-components';\nimport * as icons from '../../../../icons';\n\nconst Skill = styled.div`\n  box-sizing: border-box;\n  padding: 5px 8px;\n  background-color: #f0f1f3;\n  margin: 0 4px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-top: 5px !important;\n`;\nconst Intro = styled.span`\n  font-size: 1rem;\n  color: black;\n  width: 80%;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst Del = styled.img`\n  width: 8px;\n  height: 8px;\n  padding: 3px;\n  margin-left: 2px;\n  cursor: pointer;\n`;\n\nfunction SettingBlock({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useSelector((state: RootState) =>\n    selectBlockById(state, blockId)\n  );\n  const styleOptions = getStyleOptions(template);\n  const currentStyle = getCurrentStyleOption(template);\n  const dispatch = useDispatch();\n\n  const [style, setStyle] = useState(currentStyle);\n  const [title, setTitle] = useState(data.title?.value);\n  const [navTitle, setNavTitle] = useState(data.navTitle);\n\n  const [intros, setIntros] = useState('');\n  const [arr, setArr] = useState(data.arrText?.value);\n\n  const skills = (data: Array<string> | undefined) => {\n    const arr = [];\n    if (!data) {\n      return;\n    }\n    for (let i = 0; i < data.length; i++) {\n      arr.push(\n        <Skill key={`${data}-${i}`}>\n          {data[i]}\n          <Del\n            src={icons.x}\n            onClick={() => {\n              setArr((res) => {\n                if (!res) {\n                  return;\n                }\n                const newarr = res.filter((value, index) => index !== i);\n                return [...newarr];\n              });\n            }}\n          />\n        </Skill>\n      );\n    }\n    return arr;\n  };\n  useEffect(() => {\n    dispatch(\n      updateBlockData({\n        blockId: id,\n        field: 'arrText',\n        value: { value: arr },\n      })\n    );\n  }, [arr, dispatch, id]);\n  return (\n    <>\n      <Card\n        title='Skillset'\n        onRemove={onRemove}\n        icon={icons.Skillset}\n        isCardOpened={isCardOpened}\n        blockId={blockId}\n      >\n        <TextInput\n          title='메뉴명'\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setNavTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'navTitle',\n                value: e.target.value,\n              })\n            );\n          }}\n          guideline='네비게이션 바에 입력될 메뉴명을 입력하세요.'\n          value={navTitle}\n        ></TextInput>\n        <CustomSelect\n          title='스타일'\n          required={true}\n          guideline='스타일를 선택해주세요.'\n          placeholder='원하는 선택지를 선택해주세요'\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n\n        <TextInput\n          title='타이틀'\n          required={true}\n          guideline='타이틀을 입력해주세요'\n          value={title}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'title',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n        ></TextInput>\n        <ArrInput\n          title='기술 스택'\n          required\n          guideline='기술 스택을 입력해주세요'\n          key={'skillset'}\n          value={intros}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setIntros(e.target.value);\n          }}\n          onClick={(e: React.MouseEvent<HTMLButtonElement>) => {\n            e.preventDefault();\n\n            setArr((res) => {\n              if (!res) {\n                return;\n              }\n              return [...res, intros];\n            });\n            setIntros(() => '');\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'arrText',\n                value: { value: arr },\n              })\n            );\n          }}\n          arr={<Intro>{skills(arr)}</Intro>}\n        ></ArrInput>\n      </Card>\n    </>\n  );\n}\n\nexport default SettingBlock;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["Skill","styled","Intro","Del","blockId","onRemove","useSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useDispatch","useState","style","setStyle","title","value","setTitle","navTitle","setNavTitle","intros","setIntros","arrText","arr","setArr","useEffect","updateBlockData","field","icon","icons","required","onChange","e","target","guideline","placeholder","options","updateTemplate","newTemplate","onClick","preventDefault","res","i","push","src","newarr","filter","index","length","skills","CardHeader","props","isOpened","CardContainer","CardBoby","HeaderIcon","pinned","TitleBox","Title","TitleIcon","Trash","Down","css","Card","alt","toggleCardState","children"],"sourceRoot":""}