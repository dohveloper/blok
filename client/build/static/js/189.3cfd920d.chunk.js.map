{"version":3,"file":"static/js/189.3cfd920d.chunk.js","mappings":"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","sources":["components/Blocks/Simple/Hero/SettingBlock.tsx","components/Card/Card.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { TextInput, CustomSelect } from '../../../Input';\nimport { Card } from '../../../Card/Card';\nimport * as icon from '../../../../icons';\nimport { getStyleOptions, getCurrentStyleOption } from '../../blockHelper';\nimport { useAppSelector, useAppDispatch } from '../../../../reducers';\nimport {\n  updateBlockData,\n  updateTemplate,\n  selectBlockById,\n} from '../../../../reducers/SiteReducer';\nimport type { RootState } from '../../../../reducers/store';\nimport { SettingBlockProps, StyleData } from '../../blockValidator';\n\nfunction Hero({ blockId, onRemove }: SettingBlockProps) {\n  const { id, template, data, isCardOpened } = useAppSelector(\n    (state: RootState) => selectBlockById(state, blockId)\n  );\n  let styleOptions = getStyleOptions(template);\n  let currentStyle = getCurrentStyleOption(template);\n\n  const dispatch = useAppDispatch();\n  const [navTitle, setNavTitle] = useState(data.navTitle);\n  const [caption, setCaption] = useState(data.caption?.value);\n  const [header, setHeader] = useState(data.header?.value);\n  const [body, setBody] = useState(data.body?.value);\n  const [buttontext, setButtontext] = useState(data.button?.title);\n  const [buttonurl, setButtonUrl] = useState(data.button?.url);\n  const [style, setStyle] = useState(currentStyle);\n  return (\n    <>\n      <Card\n        title=\"Hero\"\n        onRemove={onRemove}\n        icon={icon.Hero}\n        isCardOpened={isCardOpened}\n        pinned\n        blockId={blockId}\n      >\n        <TextInput\n          title=\"메뉴명\"\n          required={false}\n          value={navTitle}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setNavTitle(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'navTitle',\n                value: e.target.value,\n              })\n            );\n          }}\n          guideline=\"네비게이션 바에 입력될 메뉴명을 입력하세요.\"\n        ></TextInput>\n        <CustomSelect\n          title=\"스타일\"\n          required\n          guideline=\"스타일를 선택해주세요.\"\n          placeholder=\"원하는 선택지를 선택해주세요\"\n          options={styleOptions}\n          onChange={(e: StyleData) => {\n            setStyle(e);\n            dispatch(updateTemplate({ blockId: id, newTemplate: e.value }));\n          }}\n          value={style}\n        />\n        <TextInput\n          title=\"캡션\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setCaption(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'caption',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n          guideline=\"캡션에 표시될 내용을 입력하세요.\"\n          value={caption}\n        ></TextInput>\n        <TextInput\n          title=\"헤드라인\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setHeader(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'header',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n          guideline=\"캡션에 표시될 내용을 입력하세요.\"\n          value={header}\n        ></TextInput>\n        <TextInput\n          title=\"설명\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setBody(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'body',\n                value: { value: e.target.value },\n              })\n            );\n          }}\n          guideline=\"설명에 표시될 내용을 입력하세요\"\n          value={body}\n        ></TextInput>\n        <TextInput\n          title=\"버튼 텍스트\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setButtontext(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { title: e.target.value },\n              })\n            );\n          }}\n          guideline=\"비워둘 경우 버튼이 나타나지 않습니다.\"\n          value={buttontext}\n        ></TextInput>\n        <TextInput\n          title=\"버튼 URL\"\n          required={false}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n            setButtonUrl(e.target.value);\n            dispatch(\n              updateBlockData({\n                blockId: id,\n                field: 'button',\n                value: { url: e.target.value },\n              })\n            );\n          }}\n          guideline=\"버튼 클릭시 이동될 url을 입력하세요\"\n          value={buttonurl}\n        ></TextInput>\n      </Card>\n    </>\n  );\n}\n\nexport default Hero;\n","import styled, { css } from 'styled-components';\nimport * as icon from '../../icons';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleCardState } from '../../reducers/SiteReducer';\n\nexport const CardHeader = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-radius: ${(props) =>\n    props.isOpened === true ? '12px 12px 0 0' : '12px'};\n  position: relative;\n  width: 100%;\n  height: 60px;\n  display: flex;\n  padding: 0px 24px;\n  box-sizing: border-box;\n  & * {\n    user-select: none;\n    user-drag: none;\n  }\n`;\n\nconst CardContainer = styled.div`\n  width: 100%;\n`;\n\nconst CardBoby = styled.div<{ isOpened: boolean }>`\n  background: #ffffff;\n  border: 1px solid #efefef;\n  border-top: none;\n  padding: 24px;\n  box-sizing: border-box;\n  border-radius: 0 0 12px 12px;\n  div:first-child {\n    margin-top: 0px;\n  }\n`;\n\nconst HeaderIcon = styled.img<{ pinned: boolean }>`\n  width: 22px;\n  height: 22px;\n  margin: auto 0;\n  &:hover {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grab')};\n  }\n  &:active {\n    cursor: ${(props) => (props.pinned ? 'not-allowed' : 'grabbing')};\n  }\n`;\n\nconst TitleBox = styled.div`\n  font-weight: 600;\n  font-size: 18px;\n  display: flex;\n  margin-left: 20px;\n`;\n\nconst Title = styled.span`\n  margin: auto 0;\n  margin-left: 16px;\n  padding-top: 2px;\n`;\n\nconst TitleIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  margin: auto 0;\n`;\nconst Trash = styled.img`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 64px;\n  top: 9px;\n  transition: opacity 0.3s;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.6;\n  }\n`;\nconst Down = styled.img<{ isOpened: boolean }>`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  padding: 10px;\n  right: 22px;\n  top: 9px;\n  transition: transform 0.4s;\n  &:hover {\n    cursor: pointer;\n  }\n  ${(props) =>\n    props.isOpened &&\n    css`\n      transform: rotate(180deg);\n    `}\n`;\n\ninterface Cardprops {\n  title: string;\n  children: any;\n  pinned?: boolean;\n  icon?: string;\n  onRemove: (event: React.MouseEvent<HTMLElement>) => void;\n  isCardOpened?: boolean;\n  blockId?: string;\n}\n\nexport const Card = (props: Cardprops) => {\n  const dispatch = useDispatch();\n  const isCardOpened = props.isCardOpened ?? false;\n  return (\n    <CardContainer>\n      <CardHeader isOpened={isCardOpened}>\n        <HeaderIcon\n          pinned={props.pinned ? true : false}\n          src={props.pinned ? icon.Pin : icon.Movable}\n          alt=''\n        />\n        <TitleBox>\n          <TitleIcon src={props.icon} alt='' />\n          <Title>{props.title}</Title>\n        </TitleBox>\n        <Trash src={icon.Trash} alt='' onClick={props.onRemove} />\n        <Down\n          src={icon.Down}\n          alt=''\n          isOpened={isCardOpened}\n          onClick={() => {\n            dispatch(toggleCardState(props.blockId ?? ''));\n          }}\n        />\n      </CardHeader>\n      {isCardOpened && (\n        <CardBoby isOpened={isCardOpened}>{props.children}</CardBoby>\n      )}\n    </CardContainer>\n  );\n};\n"],"names":["blockId","onRemove","useAppSelector","state","selectBlockById","id","template","data","isCardOpened","styleOptions","getStyleOptions","currentStyle","getCurrentStyleOption","dispatch","useAppDispatch","useState","navTitle","setNavTitle","caption","value","setCaption","header","setHeader","body","setBody","button","title","buttontext","setButtontext","url","buttonurl","setButtonUrl","style","setStyle","icon","pinned","required","onChange","e","target","updateBlockData","field","guideline","placeholder","options","updateTemplate","newTemplate","CardHeader","styled","props","isOpened","CardContainer","CardBoby","HeaderIcon","TitleBox","Title","TitleIcon","Trash","Down","css","Card","useDispatch","src","alt","onClick","toggleCardState","children"],"sourceRoot":""}